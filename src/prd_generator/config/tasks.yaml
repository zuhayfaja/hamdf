# Task Definitions with Sequential Dependencies
analyze_requirements:
  description: |
    Analyze the user's app/web idea: {idea_description}

    Extract and document:
    - Core business objectives and value proposition
    - Target audience and user personas
    - Key functional requirements and features
    - Non-functional requirements (performance, security, scalability)
    - Success metrics and KPIs
    - Competitive landscape analysis
    - Risk assessment and mitigation strategies

    Provide structured output with clear categorization and prioritization.
  agent: requirements_analyst
  expected_output: |
    A comprehensive requirements analysis document containing:
    1. Executive Summary (2-3 paragraphs)
    2. Business Objectives & Value Proposition
    3. User Personas & Target Audience
    4. Functional Requirements (prioritized list)
    5. Non-Functional Requirements (detailed specifications)
    6. Success Metrics & KPIs
    7. Competitive Analysis
    8. Risk Assessment Matrix

generate_prd:
  description: |
    Using the requirements analysis, create a comprehensive Product Requirements Document (PRD).

    The PRD must include:
    - Executive Summary with project vision
    - Detailed stakeholder analysis
    - Complete feature specifications with user stories
    - Technical requirements and constraints
    - User experience and interface guidelines
    - Success metrics and acceptance criteria
    - Timeline and milestone definitions
    - Resource requirements

    Follow industry-standard PRD template structure and ensure enterprise-grade quality.
  agent: prd_architect
  expected_output: |
    A complete PRD document (8000+ words) with:
    1. Document Information & Version Control
    2. Executive Summary
    3. Product Overview & Vision
    4. Stakeholder Analysis
    5. Market & User Research
    6. Feature Requirements (with user stories)
    7. Technical Requirements
    8. Design & UX Guidelines
    9. Success Metrics & KPIs
    10. Timeline & Milestones
    11. Resource Requirements
    12. Risk Management
    13. Appendices
  context:
    - analyze_requirements

recommend_tech_stack:
  description: |
    Based on the PRD and requirements analysis, recommend an optimal technology stack.

    Provide recommendations for:
    - Frontend technologies (web and/or mobile)
    - Backend frameworks and languages
    - Database solutions (relational and NoSQL options)
    - Authentication and security tools
    - DevOps and deployment platforms
    - Third-party integrations and APIs
    - Development and testing tools

    Focus on open-source and free-tier solutions while ensuring scalability and maintainability.
    Include justifications for each technology choice.
  agent: tech_stack_advisor
  expected_output: |
    A detailed technology stack recommendation document with:
    1. Architecture Overview Diagram
    2. Frontend Technologies (with alternatives)
    3. Backend Technologies (with alternatives)
    4. Database Recommendations
    5. Infrastructure & DevOps Tools
    6. Security & Authentication Solutions
    7. Third-party Integrations
    8. Development & Testing Tools
    9. Cost Analysis (open-source vs paid options)
    10. Scalability Considerations
    11. Technology Decision Matrix
  context:
    - analyze_requirements
    - generate_prd

# Development Guide Tasks - Broken into phases to avoid rate limits

create_planning_setup:
  description: |
    Create a detailed planning and project setup guide using the PRD and tech stack recommendations.

    Focus on the first phase: Planning & Setup (Weeks 1-2)
    Include:
    - Project repository creation and structure
    - Team communication setup and tools
    - Development methodology selection (Agile/Scrum)
    - Sprint planning and Definition of Done
    - Initial project documentation and processes
    - Risk assessment for planning phase

    Provide specific, actionable steps for Weeks 1-2.
  agent: development_planner
  expected_output: |
    A planning and setup guide (2500 words) containing:
    1. Development Methodology Overview
    2. Phase 1: Planning & Setup (2 weeks)
    - Sprint planning meetings
    - Definition of Done establishment
    - Repository and project structure setup
    - Team communication and collaboration tools
    - Initial risk mitigation strategies
    - Deliverables checklist
  context:
    - analyze_requirements
    - generate_prd
    - recommend_tech_stack

create_technical_architecture:
  description: |
    Create a technical architecture design guide for Week 2 of development.

    Focus on technical planning and architecture design:
    - System architecture diagrams and decisions
    - Database schema design and ERD creation
    - API endpoint planning and data models
    - Technology stack implementation details
    - High-level implementation approach
    - Technical risk assessment

    Provide specific technical specifications ready for Week 2 implementation.
  agent: development_planner
  expected_output: |
    A technical architecture guide (2500 words) containing:
    1. Week 2: Technical Architecture Design (1-2 weeks)
    - High-level architecture diagrams and system components
    - Database schema design and migration scripts creation
    - API endpoint definitions and data model specifications
    - Technical requirements and constraints documentation
    - System integration planning
    - Technical deliverables checklist
  context:
    - create_planning_setup

create_development_environment:
  description: |
    Create a development environment setup guide for Week 3 of development.

    Focus on environment preparation and tool setup:
    - Development and staging environment configuration
    - CI/CD pipeline setup and automation
    - Testing framework and quality assurance tools
    - Development team tool training and onboarding
    - Performance and security testing preparation
    - Development workflow documentation

    Provide infrastructure and tooling specifications for Week 3.
  agent: development_planner
  expected_output: |
    A development environment guide (2500 words) containing:
    1. Week 3: Development Environment Setup (1-2 weeks)
    - Local, staging, and production environment configurations
    - CI/CD pipeline definition and implementation steps
    - Testing framework setup and automation scripts
    - Development tool selection and configuration
    - Security and performance testing preparations
    - Environment setup deliverables checklist
  context:
    - create_technical_architecture

create_mvp_development:
  description: |
    Create an MVP development implementation guide for Weeks 4-8.

    Focus on core feature development and MVP delivery:
    - Sprint-by-sprint breakdown for MVP features
    - Core functionality implementation roadmap
    - Frontend and backend development schedules
    - Integration testing and validation
    - MVP feature prioritization and scope control
    - Quality checkpoints and code reviews

    Provide detailed implementation plans for the main development phase.
  agent: development_planner
  expected_output: |
    An MVP development guide (3000 words) containing:
    1. Weeks 4-5: MVP Planning & Core Features (2 weeks)
    - Feature prioritization and sprint breakdown
    - Core functionality development roadmap
    - User interface and user experience implementation plans
    - API integration and data flow specifications

    2. Weeks 6-8: Advanced Features & Integration (3 weeks)
    - Advanced feature development and implementation
    - Third-party service integrations and API connections
    - Performance optimization and scalability improvements
    - MVP completion and testing readiness
  context:
    - create_development_environment

create_testing_quality:
  description: |
    Create a testing and quality assurance guide for Weeks 9-10.

    Focus on comprehensive testing and quality processes:
    - Unit and integration testing strategies
    - User acceptance testing procedures
    - Performance and security testing plans
    - Bug tracking and resolution workflows
    - Quality metrics and acceptance criteria
    - Production readiness assessment

    Provide complete testing methodologies and checklists.
  agent: development_planner
  expected_output: |
    A testing and quality guide (2500 words) containing:
    1. Weeks 9-10: Testing & Quality Assurance (2 weeks)
    - Comprehensive testing strategy and framework implementation
    - Unit testing, integration testing, and end-to-end testing procedures
    - Performance, security, and user acceptance testing plans
    - Bug tracking, reporting, and resolution workflows
    - Quality metrics, acceptance criteria, and go-live checklists
    - Production readiness assessment and documentation
  context:
    - create_mvp_development

create_deployment_launch:
  description: |
    Create a deployment and launch preparation guide for Weeks 11-12.

    Focus on production deployment and launch processes:
    - Production environment setup and configuration
    - Deployment automation and rollback plans
    - Monitoring and logging system implementation
    - User communication and marketing preparation
    - Beta testing and soft launch strategies
    - Final production go-live procedures

    Provide production deployment and launch specifications.
  agent: development_planner
  expected_output: |
    A deployment and launch guide (2000 words) containing:
    1. Weeks 11-12: Deployment & Launch (2 weeks)
    - Production environment final configuration and security hardening
    - Automated deployment pipelines and rollback procedures
    - Monitoring, logging, and alerting system setup
    - Beta testing coordination and user feedback collection
    - Marketing, communication, and support team preparation
    - Go-live checklist, launch procedures, and post-launch monitoring
  context:
    - create_testing_quality

create_post_launch_support:
  description: |
    Create a post-launch support and maintenance guide for Week 13+.

    Focus on ongoing operation and improvement:
    - User support system and response procedures
    - Performance monitoring and optimization
    - Feature enhancement and roadmap planning
    - Incident response and maintenance procedures
    - User feedback collection and analysis
    - Continuous improvement processes

    Provide long-term success strategies and procedures.
  agent: development_planner
  expected_output: |
    A post-launch support guide (2000 words) containing:
    1. Week 13+: Post-Launch Support & Optimization (ongoing)
    - User support system setup and response procedures
    - Performance monitoring, analytics, and optimization strategies
    - Feature enhancement planning and product roadmap development
    - Incident response and emergency maintenance procedures
    - User feedback collection, analysis, and feature prioritization
    - Continuous improvement and scaling procedures
  context:
    - create_deployment_launch

review_deliverables:
  description: |
    Conduct comprehensive quality review of all generated documents.

    Review criteria:
    - Completeness and accuracy of information
    - Adherence to industry standards
    - Internal consistency across documents
    - Actionability and clarity of recommendations
    - Technical feasibility and best practices

    Provide detailed feedback and recommendations for improvements.
  agent: quality_reviewer
  expected_output: |
    A quality review report containing:
    1. Overall Assessment Summary
    2. Document-by-Document Analysis
    3. Consistency Check Results
    4. Technical Accuracy Validation
    5. Completeness Assessment
    6. Improvement Recommendations
    7. Final Approval Status
    8. Next Steps & Follow-up Actions
  context:
    - analyze_requirements
    - generate_prd
    - recommend_tech_stack
    - create_post_launch_support
